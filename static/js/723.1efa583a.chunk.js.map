{"version":3,"file":"static/js/723.1efa583a.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.js","components/movieDatabaseApi.js","pages/Home/Home.styled.js","components/RenderFilms/TraidingFilms.styled.js","components/RenderFilms/TraidingFilms.js","pages/Home/Home.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { FallingLines } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderWrapper>\n      <FallingLines\n        color=\"red\"\n        width=\"100\"\n        visible={true}\n        ariaLabel=\"falling-lines-loading\"\n      />\n    </LoaderWrapper>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst paramsTraiding = 'trending/movie/day?';\nconst SEARCH_URL = 'search/movie?';\n\nconst API_KEY = 'api_key=07a0b7347da6bb0b9ce66f00964e6e58';\nconst lang = 'language=en-US';\n\nexport async function fetchTraidingFilms() {\n  const response = await axios.get(`${BASE_URL}${paramsTraiding}${API_KEY}`);\n\n  return response.data;\n}\n\nexport async function fetchFilmsById(id) {\n  const response = await axios.get(`${BASE_URL}movie/${id}?${lang}&${API_KEY}`);\n\n  return response.data;\n}\n\nexport async function fetchSearchFilms(query) {\n  const response = await axios.get(\n    `${BASE_URL}${SEARCH_URL}&query=${query}&${API_KEY}`\n  );\n\n  return response.data;\n}\n\nexport async function fetchFilmsCast(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?${lang}&${API_KEY}`\n  );\n\n  return response.data;\n}\n\nexport async function fetchFilmsReview(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?${lang}&${API_KEY}`\n  );\n\n  return response.data;\n}\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  padding-bottom: 10px;\n  padding-top: 10px;\n  display: flex;\n  justify-content: center;\n  font-size: 20px;\n  font-weight: 600;\n  background-color: #f7f7f7;\n`;\n\nexport const MainSection = styled.div`\n  background-color: #f7f7f7;\n  padding-top: 20px;\n  padding-bottom: 40px;\n`;\n","import styled from 'styled-components';\n\nexport const MovieList = styled.ul`\n  display: flex;\n  gap: 30px;\n  flex-wrap: wrap;\n  justify-content: center;\n  max-width: calc(100vw - 48px);\n\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const FilmCard = styled.div`\n  width: 280px;\n  // height: 438px;\n  padding-bottom: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px #00000040;\n\n  &:hover,\n  &:focus {\n    box-shadow: 0px 4px 4px 0px #00000040;\n    transition: 0.5s ease all;\n    transform: scale(1.1);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 336px;\n  }\n  @media screen and (min-width: 1280px) {\n    max-width: 395px;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  border-radius: 5px;\n  margin-bottom: 8px;\n`;\n\nexport const MovieTitle = styled.h2`\n  font-weight: 20px;\n  line-height: 1.17;\n  text-transform: uppercase;\n  color: #000000;\n\n  @media screen and (min-width: 768px) {\n    line-height: 1.3;\n  }\n  @media screen and (min-width: 1280px) {\n    line-height: 1.2;\n    font-size: 20px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { NavLink, Outlet, useLocation } from 'react-router-dom';\nimport { fetchTraidingFilms } from '../movieDatabaseApi';\nimport { MovieList, FilmCard, Img, MovieTitle } from './TraidingFilms.styled';\nimport Loader from '../Loader/Loader';\nimport toast, { Toaster } from 'react-hot-toast';\nimport images from '../../images/images.jpg';\n\nexport default function TraidingFilms() {\n  const [traidingFilms, setTraidingFilms] = useState([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const location = useLocation();\n\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    async function fetchMovie() {\n      try {\n        setIsLoading(true);\n        const response = await fetchTraidingFilms();\n        const films = response.results;\n        setTraidingFilms(films);\n      } catch {\n        setError('Can`t load movies!');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovie();\n  }, []);\n\n  useEffect(() => {\n    if (error !== false) {\n      toast.error(error);\n    }\n  }, [error]);\n\n  return (\n    <MovieList>\n      {isLoading && <Loader />}\n      {traidingFilms.map(({ poster_path, title, id }) => (\n        <NavLink key={id} to={`/movies/${id}`} state={{ from: location }}>\n          <FilmCard>\n            {poster_path ? (\n              <Img src={IMG_URL + poster_path} alt={title} />\n            ) : (\n              <Img src={images} alt={title} />\n            )}\n\n            <MovieTitle> {title}</MovieTitle>\n          </FilmCard>\n        </NavLink>\n      ))}\n      <Outlet />\n      <Toaster />\n    </MovieList>\n  );\n}\n\nTraidingFilms.propTypes = {\n  traidingFilms: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// import PropTypes from 'prop-types';\nimport { Title, MainSection } from './Home.styled';\nimport TraidingFilms from 'components/RenderFilms/TraidingFilms';\n\nexport default function Home() {\n  return (\n    <div>\n      <Title>Trending today</Title>\n      <MainSection>\n        <TraidingFilms />\n      </MainSection>\n    </div>\n  );\n}\n"],"names":["LoaderWrapper","styled","Loader","color","width","visible","ariaLabel","BASE_URL","paramsTraiding","SEARCH_URL","API_KEY","lang","fetchTraidingFilms","axios","response","data","fetchFilmsById","id","fetchSearchFilms","query","fetchFilmsCast","fetchFilmsReview","Title","MainSection","MovieList","FilmCard","Img","MovieTitle","TraidingFilms","useState","traidingFilms","setTraidingFilms","error","setError","isLoading","setIsLoading","location","useLocation","useEffect","films","results","fetchMovie","toast","map","poster_path","title","to","state","from","src","alt","images","Home"],"sourceRoot":""}