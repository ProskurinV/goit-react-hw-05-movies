{"version":3,"file":"static/js/663.938e1ea5.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","components/Loader/Loader.styled.js","components/Loader/Loader.js","components/movieDatabaseApi.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MainWrapper = styled.div`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 10px;\n  margin-top: 10px;\n  margin-bottom: 0;\n  padding: 0;\n  padding-bottom: 20px;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const AddInfo = styled.div`\n  padding-bottom: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px #00000040;\n  justify-content: center;\n`;\n\nexport const Img = styled.img`\n  width: 50px;\n  padding-left: 20px;\n  padding-top: 10px;\n\n  border-radius: 5px;\n  margin-right: 10px;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const NameTitle = styled.p`\n  font-size: 16px;\n  font-weight: 700;\n  margin-bottom: 10px;\n  padding-top: 5px;\n  padding-right: 5px;\n`;\n\nexport const CharacterTitle = styled.p`\n  font-size: 16px;\n  font-weight: 700;\n  margin-bottom: 5px;\n  font-style: italic;\n`;\n\nexport const Character = styled.p`\n  font-size: 16px;\n  line-height: 1.17;\n  color: #000000;\n`;\n\nexport const DisabledLink = styled(Link)`\n  pointer-events: none;\n`;\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { fetchFilmsCast } from '../../components/movieDatabaseApi';\nimport Loader from '../../components/Loader/Loader';\nimport toast, { Toaster } from 'react-hot-toast';\nimport images from '../../images/images.jpg';\nimport {\n  AddInfo,\n  Img,\n  NameTitle,\n  Character,\n  CharacterTitle,\n  Wrapper,\n  MainWrapper,\n  DisabledLink,\n} from './Cast.styled';\n\nexport default function Cast(id) {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    async function fetchMovieCast(movieId) {\n      try {\n        setIsLoading(true);\n        const response = await fetchFilmsCast(movieId);\n        const castList = response.cast;\n        if (castList.length === 0) {\n          toast('We don`t have any reviews for this movie');\n          return;\n        }\n        setCast(castList);\n      } catch {\n        setError('Can`t load movies!');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovieCast(movieId);\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error !== false) {\n      toast.error(error);\n    }\n  }, [error]);\n\n  if (!cast) {\n    return null;\n  }\n\n  return (\n    <MainWrapper>\n      {isLoading && <Loader />}\n      {cast.map(({ id, character, original_name, profile_path }) => {\n        return (\n          <AddInfo key={id}>\n            <DisabledLink to={'movies'} state={{ from: location }}>\n              {profile_path ? (\n                <Img src={IMG_URL + profile_path} alt={original_name} />\n              ) : (\n                <Img src={images} alt={original_name} />\n              )}\n\n              <Wrapper>\n                <NameTitle>{original_name}</NameTitle>\n                <CharacterTitle>Character:</CharacterTitle>\n                <Character>{character}</Character>\n              </Wrapper>\n            </DisabledLink>\n          </AddInfo>\n        );\n      })}\n      <Outlet />\n      <Toaster />\n    </MainWrapper>\n  );\n}\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      original_name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { FallingLines } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderWrapper>\n      <FallingLines\n        color=\"red\"\n        width=\"100\"\n        visible={true}\n        ariaLabel=\"falling-lines-loading\"\n      />\n    </LoaderWrapper>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst paramsTraiding = 'trending/movie/day?';\nconst SEARCH_URL = 'search/movie?';\n\nconst API_KEY = 'api_key=07a0b7347da6bb0b9ce66f00964e6e58';\nconst lang = 'language=en-US';\n\nexport async function fetchTraidingFilms() {\n  const response = await axios.get(`${BASE_URL}${paramsTraiding}${API_KEY}`);\n\n  return response.data;\n}\n\nexport async function fetchFilmsById(id) {\n  const response = await axios.get(`${BASE_URL}movie/${id}?${lang}&${API_KEY}`);\n\n  return response.data;\n}\n\nexport async function fetchSearchFilms(query) {\n  const response = await axios.get(\n    `${BASE_URL}${SEARCH_URL}&query=${query}&${API_KEY}`\n  );\n\n  return response.data;\n}\n\nexport async function fetchFilmsCast(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?${lang}&${API_KEY}`\n  );\n\n  return response.data;\n}\n\nexport async function fetchFilmsReview(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?${lang}&${API_KEY}`\n  );\n\n  return response.data;\n}\n"],"names":["MainWrapper","styled","AddInfo","Img","Wrapper","NameTitle","CharacterTitle","Character","DisabledLink","Link","Cast","id","movieId","useParams","useState","cast","setCast","error","setError","isLoading","setIsLoading","location","useLocation","useEffect","fetchFilmsCast","response","castList","length","toast","fetchMovieCast","Loader","map","character","original_name","profile_path","to","state","from","src","alt","images","LoaderWrapper","color","width","visible","ariaLabel","BASE_URL","paramsTraiding","SEARCH_URL","API_KEY","lang","fetchTraidingFilms","axios","data","fetchFilmsById","fetchSearchFilms","query","fetchFilmsReview"],"sourceRoot":""}