{"version":3,"file":"static/js/81.962fcb3d.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.js","components/movieDatabaseApi.js","pages/MovieDetails/MovieDetails.styled.js","components/BackLink/BackLink.styled.js","components/BackLink/BackLink.js","pages/MovieDetails/MovieDetails.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { FallingLines } from 'react-loader-spinner';\nimport { LoaderWrapper } from './Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderWrapper>\n      <FallingLines\n        color=\"red\"\n        width=\"100\"\n        visible={true}\n        ariaLabel=\"falling-lines-loading\"\n      />\n    </LoaderWrapper>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst paramsTraiding = 'trending/movie/day?';\nconst SEARCH_URL = 'search/movie?';\n\nconst API_KEY = 'api_key=07a0b7347da6bb0b9ce66f00964e6e58';\nconst lang = 'language=en-US';\n\nexport async function fetchTraidingFilms() {\n  const response = await axios.get(`${BASE_URL}${paramsTraiding}${API_KEY}`);\n\n  return response.data;\n}\n\nexport async function fetchFilmsById(id) {\n  const response = await axios.get(`${BASE_URL}movie/${id}?${lang}&${API_KEY}`);\n\n  return response.data;\n}\n\nexport async function fetchSearchFilms(query) {\n  const response = await axios.get(\n    `${BASE_URL}${SEARCH_URL}&query=${query}&${API_KEY}`\n  );\n\n  return response.data;\n}\n\nexport async function fetchFilmsCast(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?${lang}&${API_KEY}`\n  );\n\n  return response.data;\n}\n\nexport async function fetchFilmsReview(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?${lang}&${API_KEY}`\n  );\n\n  return response.data;\n}\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const FilmCard = styled.main`\n  padding-bottom: 20px;\n  /* display: flex; */\n  width: 100%;\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px #00000040;\n  @media screen and (min-width: 450px) {\n    display: flex;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 200px;\n  padding-left: 20px;\n  padding-top: 20px;\n\n  border-radius: 5px;\n  margin-right: 20px;\n`;\n\nexport const MovieTitle = styled.h2`\n  display: flex;\n  justify-content: center;\n  font-size: 30px;\n  font-weight: 700;\n  line-height: 1.17;\n  text-transform: uppercase;\n  color: #000000;\n  padding-top: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const OverTitle = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nexport const Overview = styled.p`\n  font-size: 16px;\n  line-height: 1.17;\n  color: #000000;\n  margin-bottom: 10px;\n  width: 80%;\n`;\n\nexport const VoteTitle = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nexport const Vote = styled.p`\n  font-size: 16px;\n  line-height: 1.17;\n  color: #000000;\n  margin-bottom: 10px;\n`;\n\nexport const GenresTitle = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nexport const Genres = styled.p`\n  font-size: 16px;\n  line-height: 1.17;\n  color: #000000;\n  margin-bottom: 10px;\n`;\n\nexport const AddTitle = styled.h3`\n  display: flex;\n  justify-content: flex-start;\n  font-size: 20px;\n  font-weight: 700;\n  line-height: 1.17;\n  text-transform: uppercase;\n  color: #000000;\n  padding-top: 20px;\n  padding-left: 20px;\n  margin-bottom: 10px;\n`;\n\nexport const StyledLink = styled(NavLink)`\n  font-size: 20px;\n  font-weight: 700;\n  margin-bottom: 10px;\n  padding-left: 20px;\n  display: inline;\n`;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledLinkBack = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: red;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport { StyledLinkBack } from './BackLink.styled';\n\nexport default function BackLink({ to, children }) {\n  return (\n    <StyledLinkBack to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLinkBack>\n  );\n}\n\nBackLink.propTypes = {\n  to: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { fetchFilmsById } from '../../components/movieDatabaseApi';\nimport Loader from '../../components/Loader/Loader';\nimport toast, { Toaster } from 'react-hot-toast';\nimport {\n  FilmCard,\n  Img,\n  MovieTitle,\n  Overview,\n  OverTitle,\n  VoteTitle,\n  Vote,\n  GenresTitle,\n  Genres,\n  AddTitle,\n  StyledLink,\n} from './MovieDetails.styled';\nimport BackLink from 'components/BackLink/BackLink';\nimport images from '../../images/images.jpg';\n\nexport default function MovieDetails(id) {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    async function fetchMovieID(movieId) {\n      try {\n        setIsLoading(true);\n        const response = await fetchFilmsById(movieId);\n        setMovie(response);\n      } catch {\n        setError('Can`t load movies!');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovieID(movieId);\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error !== false) {\n      toast.error(error);\n    }\n  }, [error]);\n\n  if (!movie) {\n    return null;\n  }\n\n  const { poster_path, title, vote_average, overview } = movie;\n  return (\n    <>\n      <BackLink to={backLink}>Back</BackLink>\n      <FilmCard>\n        {isLoading && <Loader />}\n        {movie.poster_path ? (\n          <Img src={IMG_URL + poster_path} alt={title} />\n        ) : (\n          <Img src={images} alt={title} />\n        )}\n\n        <div>\n          <MovieTitle>{title}</MovieTitle>\n          <OverTitle>Overview:</OverTitle>\n          <Overview>{overview}</Overview>\n          <VoteTitle>User Score:</VoteTitle>\n          <Vote>{Math.round(vote_average * 10)}%</Vote>\n          <GenresTitle>Genres:</GenresTitle>\n          <Genres> {movie.genres.map(genre => genre.name).join(', ')}</Genres>\n        </div>\n      </FilmCard>\n      <div>\n        <AddTitle>Additional information</AddTitle>\n        <StyledLink to={'cast'}>Cast</StyledLink>\n        <StyledLink to={'reviews'}>Reviews</StyledLink>\n\n        <Outlet />\n        <Toaster />\n      </div>\n    </>\n  );\n}\n\nMovieDetails.propTypes = {\n  id: PropTypes.number.isRequired,\n  movie: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n      overview: PropTypes.string.isRequired,\n    })\n  ),\n};\n"],"names":["LoaderWrapper","styled","Loader","color","width","visible","ariaLabel","BASE_URL","paramsTraiding","SEARCH_URL","API_KEY","lang","fetchTraidingFilms","axios","response","data","fetchFilmsById","id","fetchSearchFilms","query","fetchFilmsCast","fetchFilmsReview","FilmCard","Img","MovieTitle","OverTitle","Overview","VoteTitle","Vote","GenresTitle","Genres","AddTitle","StyledLink","NavLink","StyledLinkBack","Link","BackLink","to","children","size","MovieDetails","movieId","useParams","useState","movie","setMovie","error","setError","isLoading","setIsLoading","backLink","useLocation","state","from","useEffect","fetchMovieID","toast","poster_path","title","vote_average","overview","src","alt","images","Math","round","genres","map","genre","name","join"],"sourceRoot":""}